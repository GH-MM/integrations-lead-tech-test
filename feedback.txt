<---------------------------------------------------- PART 1: REVIEW OF CODE AND CHANGES. ---------------------------------------------------------------------------->


1. The developer could use "const" for unmodified strings, such as the title bar text and the window class name. 
This will help to prevent accidental modification of these strings. (Line 13 and 14 - WindowsAPIProject.cpp).

 const szTitle[ MAX_LOADSTRING ];     // The title bar text
 const szWindowClass[ MAX_LOADSTRING ];            // the main window class name




2. The developer could use the "LoadMenu" function to load the menu resources instead of hard-coding the resource IDs. 
This makes the code easier to maintain.It will load the menu resources and assign the menu to the main window. . (Line 98 to 114 - WindowsAPIProject.cpp)

HMENU hMenu = LoadMenu(hInstance, MAKEINTRESOURCE(IDC_LUCACLIENTLAUNCHER));
SetMenu(hWnd, hMenu);

HMENU LoadMenu(HINSTANCE hInstance, UINT nResourceID)
        {
              HMENU hMenu = LoadMenuW(hInstance, MAKEINTRESOURCE(nResourceID));
              if (hMenu == NULL)
              {
                     // Error loading menu
              }

             return hMenu;
        }




3. The developer can use the "DestroyMenu" function to destroy the menu when the application is finished with it. 
This will help to prevent memory leaks, and ensures that all of the memory associated with the menu is freed.(lINE 126-162)

void DestroyMenu(HMENU hMenu)
     {
              if (hMenu != NULL)
              {
                  DestroyMenu(hMenu->hSubMenu);
                  DestroyMenu(hMenu);
              }
     }


LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_DESTROY:
        DestroyMenu(hMenu);
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}


<-------------------------------------------------------------------------TASK 2.-------------------------------------------------------------------------->

(I) lOGGING LOG FILE : In the absence of no log file initially, The program creates a logfile that logs a message and time stamp wenever the application is launched.

I added the libraries below to the framework.h header 

#include <chrono>
#include <ctime>
#include <fstream>
#include <iostream>
#include <string>


int main(); {
		std::string text = "This App was launched at: ";
		std::ofstream log_file("log_file.txt", std::ios_base::out | std::ios_base::app);

		// Get the current time
		auto now = std::chrono::system_clock::now();
		std::time_t now_time = std::chrono::system_clock::to_time_t(now);

		// Format the timestamp
		char timestamp[20];
		struct tm time_info;
		localtime_s(&time_info, &now_time);
		std::strftime(timestamp, sizeof(timestamp), "%Y-%m-%d %H:%M:%S", &time_info);

		// Write the timestamp and log message to the file
		log_file << text << "[" << timestamp << "] " << std::endl;

	}

  
  
  
  
  (ii) This functionality has a default size for the windows api project. The program bellow creates a config file. the default size of the window is stored into the file, On running the program, it checks for the stored size and sets this to the windows value. when the size is changes, it updates the size data in the config file.

  BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
	hInst = hInstance; // Store instance handle in our global variable

	// Create a configuration file if it does not exist
	string filename = "config.txt";
	if (!std::ifstream(filename)) {
		ofstream file(filename);
		file << MIN_WINDOW_WIDTH << endl;
		file << MIN_WINDOW_HEIGHT << endl;
		file.close();
	}

	// Read the configuration file to get the initial size and position of the window
	Config config;
	std::ifstream file(filename);
	if (file.is_open()) {
		file >> config.width >> config.height >> config.x >> config.y;
		file.close();
	} else {
		config.width = 800;
		config.height = 600;
		config.x = 0;
		config.y = 0;
	}

	HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
		config.x, config.y, config.width, config.height, nullptr, nullptr, hInstance, nullptr);

	if (!hWnd)
	{
		return FALSE;
	}

	ShowWindow(hWnd, nCmdShow);
	UpdateWindow(hWnd);

	return TRUE;
}
